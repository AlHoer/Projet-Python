<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml" lang="en" xml:lang="en"><head>

<meta charset="utf-8">
<meta name="generator" content="quarto-1.5.23">

<meta name="viewport" content="width=device-width, initial-scale=1.0, user-scalable=yes">

<meta name="author" content="Alban Hoerdt">
<meta name="dcterms.date" content="2024-03-13">
<meta name="description" content="Construction d'un carnet d'ordre - Marché en continue">

<title>OrderBook Creation</title>
<style>
code{white-space: pre-wrap;}
span.smallcaps{font-variant: small-caps;}
div.columns{display: flex; gap: min(4vw, 1.5em);}
div.column{flex: auto; overflow-x: auto;}
div.hanging-indent{margin-left: 1.5em; text-indent: -1.5em;}
ul.task-list{list-style: none;}
ul.task-list li input[type="checkbox"] {
  width: 0.8em;
  margin: 0 0.8em 0.2em -1em; /* quarto-specific, see https://github.com/quarto-dev/quarto-cli/issues/4556 */ 
  vertical-align: middle;
}
/* CSS for syntax highlighting */
pre > code.sourceCode { white-space: pre; position: relative; }
pre > code.sourceCode > span { line-height: 1.25; }
pre > code.sourceCode > span:empty { height: 1.2em; }
.sourceCode { overflow: visible; }
code.sourceCode > span { color: inherit; text-decoration: inherit; }
div.sourceCode { margin: 1em 0; }
pre.sourceCode { margin: 0; }
@media screen {
div.sourceCode { overflow: auto; }
}
@media print {
pre > code.sourceCode { white-space: pre-wrap; }
pre > code.sourceCode > span { text-indent: -5em; padding-left: 5em; }
}
pre.numberSource code
  { counter-reset: source-line 0; }
pre.numberSource code > span
  { position: relative; left: -4em; counter-increment: source-line; }
pre.numberSource code > span > a:first-child::before
  { content: counter(source-line);
    position: relative; left: -1em; text-align: right; vertical-align: baseline;
    border: none; display: inline-block;
    -webkit-touch-callout: none; -webkit-user-select: none;
    -khtml-user-select: none; -moz-user-select: none;
    -ms-user-select: none; user-select: none;
    padding: 0 4px; width: 4em;
  }
pre.numberSource { margin-left: 3em;  padding-left: 4px; }
div.sourceCode
  {   }
@media screen {
pre > code.sourceCode > span > a:first-child::before { text-decoration: underline; }
}
</style>


<script src="../../site_libs/quarto-nav/quarto-nav.js"></script>
<script src="../../site_libs/quarto-nav/headroom.min.js"></script>
<script src="../../site_libs/clipboard/clipboard.min.js"></script>
<script src="../../site_libs/quarto-search/autocomplete.umd.js"></script>
<script src="../../site_libs/quarto-search/fuse.min.js"></script>
<script src="../../site_libs/quarto-search/quarto-search.js"></script>
<meta name="quarto:offset" content="../../">
<link href="../../content/OrderBook/2-Python_Execution.html" rel="next">
<link href="../../content/OrderBook/index.html" rel="prev">
<link href="../../content/.img/favicon.png" rel="icon" type="image/png">
<script src="../../site_libs/quarto-html/quarto.js"></script>
<script src="../../site_libs/quarto-html/popper.min.js"></script>
<script src="../../site_libs/quarto-html/tippy.umd.min.js"></script>
<script src="../../site_libs/quarto-html/anchor.min.js"></script>
<link href="../../site_libs/quarto-html/tippy.css" rel="stylesheet">
<link href="../../site_libs/quarto-html/quarto-syntax-highlighting.css" rel="stylesheet" class="quarto-color-scheme" id="quarto-text-highlighting-styles">
<link href="../../site_libs/quarto-html/quarto-syntax-highlighting-dark.css" rel="prefetch" class="quarto-color-scheme quarto-color-alternate" id="quarto-text-highlighting-styles">
<script src="../../site_libs/bootstrap/bootstrap.min.js"></script>
<link href="../../site_libs/bootstrap/bootstrap-icons.css" rel="stylesheet">
<link href="../../site_libs/bootstrap/bootstrap.min.css" rel="stylesheet" class="quarto-color-scheme" id="quarto-bootstrap" data-mode="light">
<link href="../../site_libs/bootstrap/bootstrap-dark.min.css" rel="prefetch" class="quarto-color-scheme quarto-color-alternate" id="quarto-bootstrap" data-mode="dark">
<link href="../../site_libs/quarto-contrib/fontawesome6-0.1.0/all.css" rel="stylesheet">
<link href="../../site_libs/quarto-contrib/fontawesome6-0.1.0/latex-fontsize.css" rel="stylesheet">
<script id="quarto-search-options" type="application/json">{
  "location": "navbar",
  "copy-button": false,
  "collapse-after": 3,
  "panel-placement": "end",
  "type": "overlay",
  "limit": 50,
  "keyboard-shortcut": [
    "f",
    "/",
    "s"
  ],
  "show-item-context": false,
  "language": {
    "search-no-results-text": "No results",
    "search-matching-documents-text": "matching documents",
    "search-copy-link-title": "Copy link to search",
    "search-hide-matches-text": "Hide additional matches",
    "search-more-match-text": "more match in this document",
    "search-more-matches-text": "more matches in this document",
    "search-clear-button-title": "Clear",
    "search-text-placeholder": "",
    "search-detached-cancel-button-title": "Cancel",
    "search-submit-button-title": "Submit",
    "search-label": "Search"
  }
}</script>


<link rel="stylesheet" href="../../styles.css">
<meta property="og:title" content="OrderBook Creation">
<meta property="og:description" content="Construction d'un carnet d'ordre - Marché en continue">
<meta property="og:image" content=".img/history.png">
<meta property="og:site_name" content="Projet Python">
<meta name="citation_title" content="ORDERBOOK">
<meta name="citation_author" content="Alban Hoerdt">
<meta name="citation_publication_date" content="2024-03-13">
<meta name="citation_cover_date" content="2024-03-13">
<meta name="citation_year" content="2024">
<meta name="citation_online_date" content="2024-03-13">
<meta name="citation_language" content="en">
</head>

<body class="nav-sidebar floating nav-fixed">

<div id="quarto-search-results"></div>
  <header id="quarto-header" class="headroom fixed-top">
    <nav class="navbar navbar-expand-lg " data-bs-theme="dark">
      <div class="navbar-container container-fluid">
      <div class="navbar-brand-container mx-auto">
    <a class="navbar-brand" href="../../index.html">
    <span class="navbar-title">OrderBook Creation</span>
    </a>
  </div>
            <div id="quarto-search" class="" title="Search"></div>
          <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarCollapse" aria-controls="navbarCollapse" aria-expanded="false" aria-label="Toggle navigation" onclick="if (window.quartoToggleHeadroom) { window.quartoToggleHeadroom(); }">
  <span class="navbar-toggler-icon"></span>
</button>
          <div class="collapse navbar-collapse" id="navbarCollapse">
            <ul class="navbar-nav navbar-nav-scroll me-auto">
  <li class="nav-item">
    <a class="nav-link" href="https://Alhoer.github.io/"> 
<span class="menu-text">Back to Main Website</span></a>
  </li>  
  <li class="nav-item">
    <a class="nav-link" href="../../index.html"> 
<span class="menu-text">Home</span></a>
  </li>  
  <li class="nav-item dropdown ">
    <a class="nav-link dropdown-toggle" href="#" id="nav-menu-Projet-Python" role="button" data-bs-toggle="dropdown" aria-expanded="false">
 <span class="menu-text">Projet Python</span>
    </a>
    <ul class="dropdown-menu" aria-labelledby="nav-menu-Projet-Python">    
        <li>
    <a class="dropdown-item" href="../../content/OrderBook/index.html">
 <span class="dropdown-text">Projet Python</span></a>
  </li>  
        <li>
    <a class="dropdown-item" href="../../content/OrderBook.html">
 <span class="dropdown-text">OderBook Creation</span></a>
  </li>  
    </ul>
  </li>
</ul>
          </div> <!-- /navcollapse -->
            <div class="quarto-navbar-tools tools-wide">
    <div class="dropdown">
      <a href="" title="" id="quarto-navigation-tool-dropdown-0" class="quarto-navigation-tool dropdown-toggle px-1" data-bs-toggle="dropdown" aria-expanded="false" aria-label=""><i class="bi bi-github"></i></a>
      <ul class="dropdown-menu" aria-labelledby="quarto-navigation-tool-dropdown-0">
          <li>
            <a class="dropdown-item quarto-navbar-tools-item" href="https://github.com/Alhoer/OrderBook Creation">
            Code source
            </a>
          </li>
      </ul>
    </div>
  <a href="" class="quarto-color-scheme-toggle quarto-navigation-tool  px-1" onclick="window.quartoToggleColorScheme(); return false;" title="Toggle dark mode"><i class="bi"></i></a>
  <a href="" class="quarto-reader-toggle quarto-navigation-tool px-1" onclick="window.quartoToggleReader(); return false;" title="Toggle reader mode">
  <div class="quarto-reader-toggle-btn">
  <i class="bi"></i>
  </div>
</a>
</div>
      </div> <!-- /container-fluid -->
    </nav>
  <nav class="quarto-secondary-nav">
    <div class="container-fluid d-flex">
      <button type="button" class="quarto-btn-toggle btn" data-bs-toggle="collapse" data-bs-target=".quarto-sidebar-collapse-item" aria-controls="quarto-sidebar" aria-expanded="false" aria-label="Toggle sidebar navigation" onclick="if (window.quartoToggleHeadroom) { window.quartoToggleHeadroom(); }">
        <i class="bi bi-layout-text-sidebar-reverse"></i>
      </button>
        <nav class="quarto-page-breadcrumbs" aria-label="breadcrumb"><ol class="breadcrumb"><li class="breadcrumb-item"><a href="../../content/Cours_1/1-Histoire.html">Histoire du Langage</a></li></ol></nav>
        <a class="flex-grow-1" role="button" data-bs-toggle="collapse" data-bs-target=".quarto-sidebar-collapse-item" aria-controls="quarto-sidebar" aria-expanded="false" aria-label="Toggle sidebar navigation" onclick="if (window.quartoToggleHeadroom) { window.quartoToggleHeadroom(); }">      
        </a>
    </div>
  </nav>
</header>
<!-- content -->
<div id="quarto-content" class="quarto-container page-columns page-rows-contents page-layout-full page-navbar">
<!-- sidebar -->
  <nav id="quarto-sidebar" class="sidebar collapse collapse-horizontal quarto-sidebar-collapse-item sidebar-navigation floating overflow-auto">
    <div class="sidebar-menu-container"> 
    <ul class="list-unstyled mt-1">
        <li class="sidebar-item">
  <div class="sidebar-item-container"> 
  <a href="../../content/OrderBook/index.html" class="sidebar-item-text sidebar-link">
 <span class="menu-text">Projet Python</span></a>
  </div>
</li>
        <li class="sidebar-item">
  <div class="sidebar-item-container"> 
  <a href="../../content/OrderBook/OrderBook.html" class="sidebar-item-text sidebar-link active">
 <span class="menu-text">OrderBook Creation</span></a>
  </div>
</li>
       
      </ul>
  </li>
    </ul>
    </div>
</nav>
<div id="quarto-sidebar-glass" class="quarto-sidebar-collapse-item" data-bs-toggle="collapse" data-bs-target=".quarto-sidebar-collapse-item"></div>
<!-- margin-sidebar -->
    <div id="quarto-margin-sidebar" class="sidebar margin-sidebar">
        <nav id="TOC" role="doc-toc" class="toc-active">
    <h2 id="toc-title">On this page</h2>
   
  <ul>
  <li><a href="#creation-dun-carnet-dordre" id="toc-creation-dun-carnet-dordre" class="nav-link active" data-scroll-target="#creation-dun-carnet-dordre">Création d'un carnet d'ordre</a>
  <ul class="collapse">
  <li><a href="#1.---Analyse-et-Conception-Révisée" id="toc-1.---Analyse-et-Conception-Révisée" class="nav-link" data-scroll-target="#1.---Analyse-et-Conception-Révisée">1. Analyse et Conception Révisée</a></li>
  <li><a href="#2.---Développement-de-la-Classe-CarnetOrdres" id="toc-2.---Développement-de-la-Classe-CarnetOrdres" class="nav-link" data-scroll-target="#2.---Développement-de-la-Classe-CarnetOrdres">2. Développement de la Classe CarnetOrdres</a></li>
  <li><a href="#3.---Simulation-du-marché" id="toc-3.---Simulation-du-marché" class="nav-link" data-scroll-target="#3.---Simulation-du-marché"># 3. Simulation du marché</a></li>
  <li><a href="#4.---Intégration-des-concepts-avancés" id="toc-4.---Intégration-des-concepts-avancés" class="nav-link" data-scroll-target="#4.---Intégration-des-concepts-avancés">4. Intégration des concepts avancés</a></li>
  <li><a href="#5.---Exemple-dutilisation" id="toc-5.---Exemple-dutilisation" class="nav-link" data-scroll-target="#5.---Exemple-dutilisation">5. Exemple d'utilisation</a></li>
  <li><a href="#6.---Révision-et-amélioration" id="toc-6.---Révision-et-amélioration" class="nav-link" data-scroll-target="#6.---Révision-et-amélioration">6. Révision et amélioration</a></li>
  </ul></li>
  </ul>
</nav>
    </div>
<!-- main -->
<main class="content column-body" id="quarto-document-content">

<header id="title-block-header" class="quarto-title-block default">
<div class="quarto-title">
<h1 class="title">Compte Rendu de la création d'un Carnet d'ordre</h1>
  <div class="quarto-categories">
    <div class="quarto-category">Projet Python</div>
    <div class="quarto-category">OrderBook</div>
  </div>
  </div>

<div>
  <div class="description">
    La création d'un simulateur de carnet d'ordres implique plusieurs étapes de conception et de développement pour reproduire fidèlement le fonctionnement des carnets d'ordres sur les marchés financiers. Voici un plan détaillé pour construire ce simulateur en se focalisant sur les concepts clés et les objectifs du projet.
</div>


<div class="quarto-title-meta column-body">

    <div>
    <div class="quarto-title-meta-heading">Author</div>
    <div class="quarto-title-meta-contents">
             <p>Alban Hoerdt </p>
          </div>
  </div>
    
    <div>
    <div class="quarto-title-meta-heading">Published</div>
    <div class="quarto-title-meta-contents">
      <p class="date">2024-03-13</p>
    </div>
  </div>
  
    
  </div>
  


</header>


<section id="creation-dun-carnet-dordre" class="level1">
<h1>Création d'un carnet d'ordre</h1>
<hr>
<section id="1.---Analyse-et-Conception-Révisée" class="level2">
<h2 class="anchored" data-anchor-id="1.---Analyse-et-Conception-Révisée">1. Analyse et Conception Révisée</h2>
<section id="a.--Compréhension-Approfondie-des-Carnets-dOrdres" class="level3">
<h3 class="anchored" data-anchor-id="a.--Compréhension-Approfondie-des-Carnets-dOrdres">a. Compréhension Approfondie des Carnets d'Ordres</h3>
  
<p>Les carnets d'ordres doivent fonctionner de manière continue, reflétant un environnement dynamique où les participants peuvent à tout moment ajouter ou annuler des ordres. Cette flexibilité est essentielle pour simuler fidèlement le comportement des marchés financiers réels.<p>

<section id="b.-Mise-en-Avant-des-Concepts-de-Maker-et-Taker" class="level3">
<h3 class="anchored" data-anchor-id="b.-Mise-en-Avant-des-Concepts-de-Maker-et-Taker">b. Mise en Avant des Concepts de Maker et Taker</h3>  
  
<p>- Maker : Les Makers ajoutent de la liquidité au marché en plaçant des ordres qui ne sont pas exécutés immédiatement, restant dans le carnet jusqu'à ce qu'un prix correspondant soit trouvé.</p>
<p>- Taker : Les Takers retirent de la liquidité en exécutant des ordres contre les ordres existants dans le carnet, facilitant ainsi des transactions immédiates.</p>
<p>Ces rôles influencent directement la dynamique de l'offre et de la demande et seront essentiels pour simuler le fonctionnement du marché.</p>

<section id="c.-Intégration-des-Notions-de-Tick-et-Lot" class="level3">
<h3 class="anchored" data-anchor-id="c.-Intégration-des-Notions-de-Tick-et-Lot">c. Intégration des Notions de Tick et Lot</h3>
  
<p>- Tick : Le Tick représente le plus petit mouvement de prix possible pour un actif. Cette notion est cruciale pour déterminer comment les prix peuvent évoluer dans le carnet d'ordres.</p>
<p>- Lot : Le Lot dénote la quantité minimale ou un multiple de cette quantité qu'un actif peut être échangé. Cette règle affecte la façon dont les ordres sont placés et exécutés.</p>

<section id="Hypothèses-de-Construction-Révisées" class="level2">
    <h2 class="anchored" data-anchor-id="Hypothèses-de-Construction-Révisées">Hypothèses de Construction Révisées</h2>
    <p>1. Continuité et Flexibilité : Le simulateur gérera les ordres de manière continue, permettant à tout moment l'ajout et l'annulation d'ordres pour simuler un environnement de marché dynamique.</p>
    <p>2. Rôles Dynamiques de Maker et Taker : Le simulateur reconnaîtra et distinguera les actions des Makers et des Takers pour refléter leur impact sur la liquidité du marché.</p>
    <p>3. Respect des Contraintes de Tick et Lot : Les règles concernant les Ticks et les Lots seront intégrées pour s'assurer que les ordres respectent les contraintes de prix et de quantité spécifiques au marché.</p>
</section>
<section id="Entités-Clés-et-Structure-de-Données" class="level2">
    <h2 class="anchored" data-anchor-id="Entités-Clés-et-Structure-de-Données">Entités Clés et Structure de Données</h2>
    <p>- Classe 'Ordre' : Représente un ordre dans le carnet avec des attributs pour le type d'ordre, le prix, la quantité, et l'identifiant du participant. Cette classe tiendra compte des notions de Tick et Lot pour valider les ordres.</p>
    <p>- Classe 'CarnetOrdres' : Gère un ensemble d'ordres d'achat et de vente, en permettant leur ajout, leur annulation, et en fournissant une visualisation claire du carnet. Cette classe gérera également la distinction entre les ordres de Makers et de Takers pour simuler l'impact sur la liquidité.</p>
</section>
<section id="Conclusion-et-Prochaine-Étape" class="level2">
    <h2 class="anchored" data-anchor-id="Conclusion-et-Prochaine-Étape">Conclusion et Prochaine Étape</h2>
    <p>La prochaine étape consistera à détailler le développement de la classe CarnetOrdres et à simuler son fonctionnement dans un environnement de marché.</p>
</section>
</section>

<section id="Développement-de-la-Classe-CarnetOrdres" class="level1">
    <h1>Développement de la Classe CarnetOrdres</h1>
    <hr>
    <section id="Structure-de-la-Classe" class="level2">
        <h2 class="anchored" data-anchor-id="Structure-de-la-Classe">a. Structure de la Classe</h2>
        <p>La classe CarnetOrdres sera structurée pour gérer efficacement les ordres d'achat et de vente, en prenant en compte les contraintes de marché telles que les ticks et les lots.</p>
        <pre><code class="language-python">class CarnetOrdres:
    def __init__(self, valeur_tick, taille_contrat, taille_lot=100):
        self.ordres_achat = []  # Liste pour stocker les ordres d'achat
        self.ordres_vente = []  # Liste pour stocker les ordres de vente
        self.valeur_tick = valeur_tick
        self.taille_contrat = taille_contrat
        self.taille_lot = taille_lot  # Taille standard du lot, par défaut 100 pour les actions

    def ajouter_ordre(self, type_ordre, prix, quantite, participant):
        # Vérification de la validité du prix et de la quantité en fonction des ticks et des lots
        if quantite % self.taille_lot != 0:
            raise ValueError("La quantité doit être un multiple de la taille du lot")
        if (prix * self.taille_contrat) % self.valeur_tick != 0:
            raise ValueError("Le prix doit respecter la valeur du tick")
        
        ordre = {"type": type_ordre, "prix": prix, "quantite": quantite, "participant": participant}
        if type_ordre == "achat":
            self.ordres_achat.append(ordre)
            self.ordres_achat.sort(key=lambda x: x['prix'], reverse=True)
        else:  # Supposé "vente"
            self.ordres_vente.append(ordre)
            self.ordres_vente.sort(key=lambda x: x['prix'])

    def annuler_ordre(self, participant, prix, type_ordre):
        # Mécanisme pour annuler un ordre spécifique basé sur le participant et le prix
        if type_ordre == "achat":
            self.ordres_achat = [ordre for ordre in self.ordres_achat if not (ordre['participant'] == participant and ordre['prix'] == prix)]
        else:  # Supposé "vente"
            self.ordres_vente = [ordre for ordre in self.ordres_vente if not (ordre['participant'] == participant and ordre['prix'] == prix)]
</code></pre>
    </section>
    <section id="Gestion-des-Ordres" class="level2">
        <h2 class="anchored" data-anchor-id="Gestion-des-Ordres">b. Gestion des Ordres</h2>
        <p>La gestion des ordres intègre les contraintes de tick et de lots pour s'assurer que chaque ordre ajouté ou annulé respecte les règles du marché. Les ordres sont triés en fonction de leur prix de manière à refléter les priorités du marché (prix décroissant pour les achats et croissant pour les ventes).</p>
    </section>
    <section id="Affichage-du-Carnet" class="level2">
        <h2 class="anchored" data-anchor-id="Affichage-du-Carnet">c. Affichage du Carnet</h2>
        <pre><code class="language-python">def afficher_carnet(self):
    print("Carnet d'ordres: Achats")
    for ordre in self.ordres_achat:
        print(f"Participant: {ordre['participant']}, Prix: {ordre['prix']}, Quantité: {ordre['quantite']}")
    print("Carnet d'ordres: Ventes")
    for ordre in self.ordres_vente:
        print(f"Participant: {ordre['participant']}, Prix: {ordre['prix']}, Quantité: {ordre['quantite']}")
</code></pre>
    </section>
    <section id="Résumé" class="level2">
        <h2 class="anchored" data-anchor-id="Résumé">Résumé</h2>
        <p>La classe CarnetOrdres est désormais conçue pour intégrer les notions de tick et de lot, garantissant que les ordres respectent les contraintes du marché. La possibilité d'ajouter et d'annuler des ordres de manière flexible permet de simuler un environnement de marché dynamique et continu. L'affichage du carnet offre une vue claire des ordres d'achat et de vente, facilitant la compréhension de la dynamique du marché.</p>
    </section>
</section>

<section id="Simulation-du-marché" class="level1">
    <h1>Simulation du marché</h1>
    <hr>
    <section id="Génération-de-Données-de-Simulation" class="level2">
        <h2 class="anchored" data-anchor-id="Génération-de-Données-de-Simulation">a. Génération de Données de Simulation</h2>
        <p>Pour générer des données de simulation, nous définirons un ensemble d'ordres d'achat et de vente avec des prix, des quantités et des participants variés. Ces données serviront à tester le fonctionnement du carnet d'ordres dans différents scénarios.</p>
    </section>
    <section id="Boucle-de-Simulation" class="level2">
        <h2 class="anchored" data-anchor-id="Boucle-de-Simulation">b. Boucle de Simulation</h2>
        <p>La boucle de simulation itérera à travers les ordres générés, ajoutant et annulant des ordres dans le carnet pour simuler un environnement de marché dynamique.</p>
        <pre><code class="language-python">import random

# Exemple d'initialisation de la classe CarnetOrdres avec des valeurs fictives pour le tick et le lot
carnet = CarnetOrdres(valeur_tick=12.5, taille_contrat=50)

# Génération de données de simulation
participants = ['Trader A', 'Trader B', 'Trader C', 'Trader D']
types_ordre = ['achat', 'vente']
prix_base = 100  # Prix de base pour les ordres

# Fonction pour générer des ordres aléatoires
def generer_ordres_aleatoires(nombre_ordres):
    for _ in range(nombre_ordres):
        type_ordre = random.choice(types_ordre)
        prix = prix_base + random.randint(-10, 10)  # Génère un prix autour du prix de base
        quantite = random.choice([100, 200, 300])  # Quantité en multiples de 100 (taille du lot)
        participant = random.choice(participants)
        
        # Tentative d'ajouter l'ordre au carnet
        try:
            carnet.ajouter_ordre(type_ordre, prix, quantite, participant)
        except ValueError as e:
            print(f"Erreur lors de l'ajout de l'ordre : {e}")

# Boucle de simulation
def simuler_marche():
    generer_ordres_aleatoires(10)  # Génère et ajoute 10 ordres aléatoires au carnet
    carnet.afficher_carnet()  # Affiche l'état actuel du carnet après l'ajout des ordres

    # Exemple d'annulation d'un ordre
    carnet.annuler_ordre(participants[0], prix_base, 'achat')
    print("\\nCarnet d'ordres après annulation d'un ordre :\\n")
    carnet.afficher_carnet()

# Exécution de la simulation
simuler_marche()
</code></pre>
        <p>Ce script commence par initialiser le carnet d'ordres avec des paramètres fictifs pour les valeurs de tick et de lot. Ensuite, il génère une série d'ordres d'achat et de vente avec des attributs aléatoires pour simuler différents scénarios de marché. Après l'ajout des ordres, l'état actuel du carnet est affiché. Enfin, un exemple d'annulation d'un ordre est montré pour illustrer comment les ordres peuvent être retirés du carnet, suivi d'une nouvelle visualisation du carnet pour montrer l'impact de l'annulation.</p>
        <p>Cette simulation est simplifiée et peut être étendue ou modifiée pour inclure des scénarios de marché plus complexes ou pour tester des comportements spécifiques du carnet d'ordres.</p>
    </section>
</section>

<section id="Intégration-des-concepts-avancés" class="level1">
    <h1>Intégration des concepts avancés</h1>
    <hr>
    <p>Intégrer les concepts avancés de tick, lot, et les rôles de Maker et Taker dans notre simulateur de carnet d'ordres nécessite d'ajuster la classe CarnetOrdres et de modifier la logique de simulation pour refléter ces aspects. Nous allons maintenant détailler ces intégrations.</p>
    <section id="Tick-et-Lot" class="level2">
        <h2 class="anchored" data-anchor-id="Tick-et-Lot">a. Tick et Lot</h2>
        <p>Nous avons déjà introduit la validation de la quantité par rapport à la taille du lot dans l'ajout d'ordres et la validation du prix en fonction du tick. Ces contrôles assurent que les ordres respectent les règles minimales de mouvement de prix et de quantité d'échange. Cette logique a été intégrée dans la méthode ajouter_ordre de la classe CarnetOrdres.</p>
    </section>
    <section id="Rôles-de-Maker-et-Taker" class="level2">
        <h2 class="anchored" data-anchor-id="Rôles-de-Maker-et-Taker">b. Rôles de Maker et Taker</h2>
        <p>Pour distinguer entre les ordres de Maker et de Taker, nous devons ajouter une logique supplémentaire pour déterminer si un nouvel ordre peut être immédiatement exécuté contre des ordres existants dans le carnet (Taker) ou s'il doit être ajouté au carnet en attendant un ordre correspondant (Maker).</p>
    </section>
    <section id="Modification-de-la-Classe-CarnetOrdres" class="level2">
        <h2 class="anchored" data-anchor-id="Modification-de-la-Classe-CarnetOrdres">Modification de la Classe CarnetOrdres</h2>
        <p>Nous ajoutons une méthode executer_si_possible pour essayer d'exécuter immédiatement les ordres entrants contre ceux existants dans le carnet. Si un ordre ne peut être exécuté immédiatement, il est considéré comme un ordre de Maker et est ajouté au carnet.</p>
        <pre><code class="language-python">class CarnetOrdres:
    # Initialisation et autres méthodes restent inchangées

    def executer_si_possible(self, ordre):
        opposé = 'vente' if ordre['type'] == 'achat' else 'achat'
        liste_opposée = self.ordres_vente if opposé == 'vente' else self.ordres_achat

        for ordre_opposé in liste_opposée:
            if ordre['type'] == 'achat' and ordre['prix'] >= ordre_opposé['prix'] or \
               ordre['type'] == 'vente' and ordre['prix'] <= ordre_opposé['prix']:
                # Logique d'exécution ici (simplifiée pour cet exemple)
                print(f"Exécution de l'ordre : {ordre} contre {ordre_opposé}")
                liste_opposée.remove(ordre_opposé)
                return True
        return False

    def ajouter_ordre(self, type_ordre, prix, quantite, participant):
        # Vérifications restent inchangées
        
        ordre = {"type": type_ordre, "prix": prix, "quantite": quantite, "participant": participant}
        
        # Essayer d'exécuter l'ordre immédiatement
        if not self.executer_si_possible(ordre):
            # Si l'ordre n'est pas exécuté, l'ajouter au carnet comme un Maker
            if type_ordre == "achat":
                self.ordres_achat.append(ordre)
                self.ordres_achat.sort(key=lambda x: x['prix'], reverse=True)
            else:  # Supposé "vente"
                self.ordres_vente.append(ordre)
                self.ordres_vente.sort(key=lambda x: x['prix'])
</code></pre>
        <p>Dans cette logique simplifiée, un ordre est exécuté si un ordre opposé existant peut satisfaire immédiatement son prix. Cette opération simule l'activité de Taker. Si aucun ordre opposé n'est satisfaisant, l'ordre est ajouté au carnet, agissant ainsi comme un Maker.</p>
    </section>
    <section id="Conclusion" class="level2">
        <h2 class="anchored" data-anchor-id="Conclusion">Conclusion</h2>
        <p>Avec l'intégration de ces concepts avancés, notre simulateur de carnet d'ordres est désormais capable de gérer des aspects cruciaux du trading sur les marchés financiers, y compris les contraintes de tick et de lot, ainsi que la dynamique de liquidité apportée par les rôles de Maker et Taker. Cette approche améliore considérablement la réalité de la simulation, offrant une expérience plus proche des opérations de marché réelles.</p>
    </section>
</section>

<section id="Exemple-dutilisation" class="level1">
    <h1>Exemple d'utilisation</h1>
    <hr>
    <section id="Créer-un-Exemple-Concret" class="level2">
        <h2 class="anchored" data-anchor-id="Créer-un-Exemple-Concret">a. Créer un Exemple Concret</h2>
        <p>Imaginons un scénario de marché simple où différents participants ajoutent, exécutent et annulent des ordres. Ce script illustre l'utilisation de notre classe CarnetOrdres dans ce contexte :</p>
        <pre><code class="language-python"># Création de l'instance du carnet d'ordres
carnet = CarnetOrdres(valeur_tick=12.5, taille_contrat=50)

# Ajout d'ordres d'achat et de vente dans le carnet
carnet.ajouter_ordre("achat", 100, 100, "Trader A")
carnet.ajouter_ordre("vente", 105, 100, "Trader B")
carnet.ajouter_ordre("achat", 101, 100, "Trader C")
carnet.ajouter_ordre("vente", 102, 100, "Trader D")

# Affichage de l'état initial du carnet d'ordres
print("Carnet d'ordres initial :")
carnet.afficher_carnet()

# Simulation d'une annulation d'ordre
carnet.annuler_ordre("Trader A", 100, "achat")
print("\nCarnet d'ordres après annulation de l'ordre de Trader A :")
carnet.afficher_carnet()

# Exécution d'un ordre qui correspond à un ordre existant dans le carnet (Taker)
carnet.ajouter_ordre("achat", 102, 100, "Trader E")
print("\nCarnet d'ordres après exécution de l'ordre de Trader E :")
carnet.afficher_carnet()
</code></pre>
    </section>
    <section id="Tester-et-Valider" class="level2">
        <h2 class="anchored" data-anchor-id="Tester-et-Valider">b. Tester et Valider</h2>
        <p>La validation de ce simulateur de carnet d'ordres implique de vérifier qu'il gère correctement les ajouts, exécutions et annulations d'ordres selon les règles définies. Le script d'exemple ci-dessus sert de base pour ces tests, mais des cas de test plus exhaustifs devraient être conçus pour couvrir divers scénarios de marché.</p>
    </section>
</section>

<section id="Révision-et-amélioration" class="level1">
    <h1>Révision et amélioration</h1>
    <hr>
    <section id="Évaluation-de-Performance" class="level2">
        <h2 class="anchored" data-anchor-id="Évaluation-de-Performance">a. Évaluation de Performance</h2>
        <p>Tester la performance avec de grands volumes d'ordres est crucial, surtout pour simuler des marchés très liquides. Des outils de profilage de code en Python comme cProfile ou line_profiler peuvent aider à identifier les goulets d'étranglement.</p>
    </section>
    <section id="Feedback-et-Amélioration" class="level2">
        <h2 class="anchored" data-anchor-id="Feedback-et-Amélioration">b. Feedback et Amélioration</h2>
        <p>La phase de feedback est essentielle. Elle peut impliquer :</p>
        <ul>
            <li>Des discussions avec des traders ou des utilisateurs potentiels pour comprendre leurs besoins.</li>
            <li>L'ajout de fonctionnalités demandées, comme des types d'ordres supplémentaires (e.g., ordres stop).</li>
            <li>L'optimisation du code pour améliorer la performance et l'efficacité.</li>
        </ul>
        <p>Ce processus d'itération, basé sur le feedback et l'amélioration continue, est fondamental pour raffiner le simulateur et le rendre plus utile et performant pour ses utilisateurs.</p>
    </section>
</section>


<a onclick="window.scrollTo(0, 0); return false;" role="button" id="quarto-back-to-top"><i class="bi bi-arrow-up"></i> Back to top</a></main> <!-- /main -->
<script id="quarto-html-after-body" type="application/javascript">
window.document.addEventListener("DOMContentLoaded", function (event) {
  const toggleBodyColorMode = (bsSheetEl) => {
    const mode = bsSheetEl.getAttribute("data-mode");
    const bodyEl = window.document.querySelector("body");
    if (mode === "dark") {
      bodyEl.classList.add("quarto-dark");
      bodyEl.classList.remove("quarto-light");
    } else {
      bodyEl.classList.add("quarto-light");
      bodyEl.classList.remove("quarto-dark");
    }
  }
  const toggleBodyColorPrimary = () => {
    const bsSheetEl = window.document.querySelector("link#quarto-bootstrap");
    if (bsSheetEl) {
      toggleBodyColorMode(bsSheetEl);
    }
  }
  toggleBodyColorPrimary();  
  const disableStylesheet = (stylesheets) => {
    for (let i=0; i < stylesheets.length; i++) {
      const stylesheet = stylesheets[i];
      stylesheet.rel = 'prefetch';
    }
  }
  const enableStylesheet = (stylesheets) => {
    for (let i=0; i < stylesheets.length; i++) {
      const stylesheet = stylesheets[i];
      stylesheet.rel = 'stylesheet';
    }
  }
  const manageTransitions = (selector, allowTransitions) => {
    const els = window.document.querySelectorAll(selector);
    for (let i=0; i < els.length; i++) {
      const el = els[i];
      if (allowTransitions) {
        el.classList.remove('notransition');
      } else {
        el.classList.add('notransition');
      }
    }
  }
  const toggleGiscusIfUsed = (isAlternate, darkModeDefault) => {
    const baseTheme = document.querySelector('#giscus-base-theme')?.value ?? 'light';
    const alternateTheme = document.querySelector('#giscus-alt-theme')?.value ?? 'dark';
    let newTheme = '';
    if(darkModeDefault) {
      newTheme = isAlternate ? baseTheme : alternateTheme;
    } else {
      newTheme = isAlternate ? alternateTheme : baseTheme;
    }
    const changeGiscusTheme = () => {
      // From: https://github.com/giscus/giscus/issues/336
      const sendMessage = (message) => {
        const iframe = document.querySelector('iframe.giscus-frame');
        if (!iframe) return;
        iframe.contentWindow.postMessage({ giscus: message }, 'https://giscus.app');
      }
      sendMessage({
        setConfig: {
          theme: newTheme
        }
      });
    }
    const isGiscussLoaded = window.document.querySelector('iframe.giscus-frame') !== null;
    if (isGiscussLoaded) {
      changeGiscusTheme();
    }
  }
  const toggleColorMode = (alternate) => {
    // Switch the stylesheets
    const alternateStylesheets = window.document.querySelectorAll('link.quarto-color-scheme.quarto-color-alternate');
    manageTransitions('#quarto-margin-sidebar .nav-link', false);
    if (alternate) {
      enableStylesheet(alternateStylesheets);
      for (const sheetNode of alternateStylesheets) {
        if (sheetNode.id === "quarto-bootstrap") {
          toggleBodyColorMode(sheetNode);
        }
      }
    } else {
      disableStylesheet(alternateStylesheets);
      toggleBodyColorPrimary();
    }
    manageTransitions('#quarto-margin-sidebar .nav-link', true);
    // Switch the toggles
    const toggles = window.document.querySelectorAll('.quarto-color-scheme-toggle');
    for (let i=0; i < toggles.length; i++) {
      const toggle = toggles[i];
      if (toggle) {
        if (alternate) {
          toggle.classList.add("alternate");     
        } else {
          toggle.classList.remove("alternate");
        }
      }
    }
    // Hack to workaround the fact that safari doesn't
    // properly recolor the scrollbar when toggling (#1455)
    if (navigator.userAgent.indexOf('Safari') > 0 && navigator.userAgent.indexOf('Chrome') == -1) {
      manageTransitions("body", false);
      window.scrollTo(0, 1);
      setTimeout(() => {
        window.scrollTo(0, 0);
        manageTransitions("body", true);
      }, 40);  
    }
  }
  const isFileUrl = () => { 
    return window.location.protocol === 'file:';
  }
  const hasAlternateSentinel = () => {  
    let styleSentinel = getColorSchemeSentinel();
    if (styleSentinel !== null) {
      return styleSentinel === "alternate";
    } else {
      return false;
    }
  }
  const setStyleSentinel = (alternate) => {
    const value = alternate ? "alternate" : "default";
    if (!isFileUrl()) {
      window.localStorage.setItem("quarto-color-scheme", value);
    } else {
      localAlternateSentinel = value;
    }
  }
  const getColorSchemeSentinel = () => {
    if (!isFileUrl()) {
      const storageValue = window.localStorage.getItem("quarto-color-scheme");
      return storageValue != null ? storageValue : localAlternateSentinel;
    } else {
      return localAlternateSentinel;
    }
  }
  const darkModeDefault = false;
  let localAlternateSentinel = darkModeDefault ? 'alternate' : 'default';
  // Dark / light mode switch
  window.quartoToggleColorScheme = () => {
    // Read the current dark / light value 
    let toAlternate = !hasAlternateSentinel();
    toggleColorMode(toAlternate);
    setStyleSentinel(toAlternate);
    toggleGiscusIfUsed(toAlternate, darkModeDefault);
  };
  // Ensure there is a toggle, if there isn't float one in the top right
  if (window.document.querySelector('.quarto-color-scheme-toggle') === null) {
    const a = window.document.createElement('a');
    a.classList.add('top-right');
    a.classList.add('quarto-color-scheme-toggle');
    a.href = "";
    a.onclick = function() { try { window.quartoToggleColorScheme(); } catch {} return false; };
    const i = window.document.createElement("i");
    i.classList.add('bi');
    a.appendChild(i);
    window.document.body.appendChild(a);
  }
  // Switch to dark mode if need be
  if (hasAlternateSentinel()) {
    toggleColorMode(true);
  } else {
    toggleColorMode(false);
  }
  const icon = "";
  const anchorJS = new window.AnchorJS();
  anchorJS.options = {
    placement: 'right',
    icon: icon
  };
  anchorJS.add('.anchored');
  const isCodeAnnotation = (el) => {
    for (const clz of el.classList) {
      if (clz.startsWith('code-annotation-')) {                     
        return true;
      }
    }
    return false;
  }
  const clipboard = new window.ClipboardJS('.code-copy-button', {
    text: function(trigger) {
      const codeEl = trigger.previousElementSibling.cloneNode(true);
      for (const childEl of codeEl.children) {
        if (isCodeAnnotation(childEl)) {
          childEl.remove();
        }
      }
      return codeEl.innerText;
    }
  });
  clipboard.on('success', function(e) {
    // button target
    const button = e.trigger;
    // don't keep focus
    button.blur();
    // flash "checked"
    button.classList.add('code-copy-button-checked');
    var currentTitle = button.getAttribute("title");
    button.setAttribute("title", "Copied!");
    let tooltip;
    if (window.bootstrap) {
      button.setAttribute("data-bs-toggle", "tooltip");
      button.setAttribute("data-bs-placement", "left");
      button.setAttribute("data-bs-title", "Copied!");
      tooltip = new bootstrap.Tooltip(button, 
        { trigger: "manual", 
          customClass: "code-copy-button-tooltip",
          offset: [0, -8]});
      tooltip.show();    
    }
    setTimeout(function() {
      if (tooltip) {
        tooltip.hide();
        button.removeAttribute("data-bs-title");
        button.removeAttribute("data-bs-toggle");
        button.removeAttribute("data-bs-placement");
      }
      button.setAttribute("title", currentTitle);
      button.classList.remove('code-copy-button-checked');
    }, 1000);
    // clear code selection
    e.clearSelection();
  });
    var localhostRegex = new RegExp(/^(?:http|https):\/\/localhost\:?[0-9]*\//);
    var mailtoRegex = new RegExp(/^mailto:/);
      var filterRegex = new RegExp('/' + window.location.host + '/');
    var isInternal = (href) => {
        return filterRegex.test(href) || localhostRegex.test(href) || mailtoRegex.test(href);
    }
    // Inspect non-navigation links and adorn them if external
 	var links = window.document.querySelectorAll('a[href]:not(.nav-link):not(.navbar-brand):not(.toc-action):not(.sidebar-link):not(.sidebar-item-toggle):not(.pagination-link):not(.no-external):not([aria-hidden]):not(.dropdown-item):not(.quarto-navigation-tool)');
    for (var i=0; i<links.length; i++) {
      const link = links[i];
      if (!isInternal(link.href)) {
        // undo the damage that might have been done by quarto-nav.js in the case of
        // links that we want to consider external
        if (link.dataset.originalHref !== undefined) {
          link.href = link.dataset.originalHref;
        }
      }
    }
  function tippyHover(el, contentFn, onTriggerFn, onUntriggerFn) {
    const config = {
      allowHTML: true,
      maxWidth: 500,
      delay: 100,
      arrow: false,
      appendTo: function(el) {
          return el.parentElement;
      },
      interactive: true,
      interactiveBorder: 10,
      theme: 'quarto',
      placement: 'bottom-start',
    };
    if (contentFn) {
      config.content = contentFn;
    }
    if (onTriggerFn) {
      config.onTrigger = onTriggerFn;
    }
    if (onUntriggerFn) {
      config.onUntrigger = onUntriggerFn;
    }
    window.tippy(el, config); 
  }
  const noterefs = window.document.querySelectorAll('a[role="doc-noteref"]');
  for (var i=0; i<noterefs.length; i++) {
    const ref = noterefs[i];
    tippyHover(ref, function() {
      // use id or data attribute instead here
      let href = ref.getAttribute('data-footnote-href') || ref.getAttribute('href');
      try { href = new URL(href).hash; } catch {}
      const id = href.replace(/^#\/?/, "");
      const note = window.document.getElementById(id);
      if (note) {
        return note.innerHTML;
      } else {
        return "";
      }
    });
  }
  const xrefs = window.document.querySelectorAll('a.quarto-xref');
  const processXRef = (id, note) => {
    // Strip column container classes
    const stripColumnClz = (el) => {
      el.classList.remove("page-full", "page-columns");
      if (el.children) {
        for (const child of el.children) {
          stripColumnClz(child);
        }
      }
    }
    stripColumnClz(note)
    if (id === null || id.startsWith('sec-')) {
      // Special case sections, only their first couple elements
      const container = document.createElement("div");
      if (note.children && note.children.length > 2) {
        container.appendChild(note.children[0].cloneNode(true));
        for (let i = 1; i < note.children.length; i++) {
          const child = note.children[i];
          if (child.tagName === "P" && child.innerText === "") {
            continue;
          } else {
            container.appendChild(child.cloneNode(true));
            break;
          }
        }
        if (window.Quarto?.typesetMath) {
          window.Quarto.typesetMath(container);
        }
        return container.innerHTML
      } else {
        if (window.Quarto?.typesetMath) {
          window.Quarto.typesetMath(note);
        }
        return note.innerHTML;
      }
    } else {
      // Remove any anchor links if they are present
      const anchorLink = note.querySelector('a.anchorjs-link');
      if (anchorLink) {
        anchorLink.remove();
      }
      if (window.Quarto?.typesetMath) {
        window.Quarto.typesetMath(note);
      }
      // TODO in 1.5, we should make sure this works without a callout special case
      if (note.classList.contains("callout")) {
        return note.outerHTML;
      } else {
        return note.innerHTML;
      }
    }
  }
  for (var i=0; i<xrefs.length; i++) {
    const xref = xrefs[i];
    tippyHover(xref, undefined, function(instance) {
      instance.disable();
      let url = xref.getAttribute('href');
      let hash = undefined; 
      if (url.startsWith('#')) {
        hash = url;
      } else {
        try { hash = new URL(url).hash; } catch {}
      }
      if (hash) {
        const id = hash.replace(/^#\/?/, "");
        const note = window.document.getElementById(id);
        if (note !== null) {
          try {
            const html = processXRef(id, note.cloneNode(true));
            instance.setContent(html);
          } finally {
            instance.enable();
            instance.show();
          }
        } else {
          // See if we can fetch this
          fetch(url.split('#')[0])
          .then(res => res.text())
          .then(html => {
            const parser = new DOMParser();
            const htmlDoc = parser.parseFromString(html, "text/html");
            const note = htmlDoc.getElementById(id);
            if (note !== null) {
              const html = processXRef(id, note);
              instance.setContent(html);
            } 
          }).finally(() => {
            instance.enable();
            instance.show();
          });
        }
      } else {
        // See if we can fetch a full url (with no hash to target)
        // This is a special case and we should probably do some content thinning / targeting
        fetch(url)
        .then(res => res.text())
        .then(html => {
          const parser = new DOMParser();
          const htmlDoc = parser.parseFromString(html, "text/html");
          const note = htmlDoc.querySelector('main.content');
          if (note !== null) {
            // This should only happen for chapter cross references
            // (since there is no id in the URL)
            // remove the first header
            if (note.children.length > 0 && note.children[0].tagName === "HEADER") {
              note.children[0].remove();
            }
            const html = processXRef(null, note);
            instance.setContent(html);
          } 
        }).finally(() => {
          instance.enable();
          instance.show();
        });
      }
    }, function(instance) {
    });
  }
      let selectedAnnoteEl;
      const selectorForAnnotation = ( cell, annotation) => {
        let cellAttr = 'data-code-cell="' + cell + '"';
        let lineAttr = 'data-code-annotation="' +  annotation + '"';
        const selector = 'span[' + cellAttr + '][' + lineAttr + ']';
        return selector;
      }
      const selectCodeLines = (annoteEl) => {
        const doc = window.document;
        const targetCell = annoteEl.getAttribute("data-target-cell");
        const targetAnnotation = annoteEl.getAttribute("data-target-annotation");
        const annoteSpan = window.document.querySelector(selectorForAnnotation(targetCell, targetAnnotation));
        const lines = annoteSpan.getAttribute("data-code-lines").split(",");
        const lineIds = lines.map((line) => {
          return targetCell + "-" + line;
        })
        let top = null;
        let height = null;
        let parent = null;
        if (lineIds.length > 0) {
            //compute the position of the single el (top and bottom and make a div)
            const el = window.document.getElementById(lineIds[0]);
            top = el.offsetTop;
            height = el.offsetHeight;
            parent = el.parentElement.parentElement;
          if (lineIds.length > 1) {
            const lastEl = window.document.getElementById(lineIds[lineIds.length - 1]);
            const bottom = lastEl.offsetTop + lastEl.offsetHeight;
            height = bottom - top;
          }
          if (top !== null && height !== null && parent !== null) {
            // cook up a div (if necessary) and position it 
            let div = window.document.getElementById("code-annotation-line-highlight");
            if (div === null) {
              div = window.document.createElement("div");
              div.setAttribute("id", "code-annotation-line-highlight");
              div.style.position = 'absolute';
              parent.appendChild(div);
            }
            div.style.top = top - 2 + "px";
            div.style.height = height + 4 + "px";
            div.style.left = 0;
            let gutterDiv = window.document.getElementById("code-annotation-line-highlight-gutter");
            if (gutterDiv === null) {
              gutterDiv = window.document.createElement("div");
              gutterDiv.setAttribute("id", "code-annotation-line-highlight-gutter");
              gutterDiv.style.position = 'absolute';
              const codeCell = window.document.getElementById(targetCell);
              const gutter = codeCell.querySelector('.code-annotation-gutter');
              gutter.appendChild(gutterDiv);
            }
            gutterDiv.style.top = top - 2 + "px";
            gutterDiv.style.height = height + 4 + "px";
          }
          selectedAnnoteEl = annoteEl;
        }
      };
      const unselectCodeLines = () => {
        const elementsIds = ["code-annotation-line-highlight", "code-annotation-line-highlight-gutter"];
        elementsIds.forEach((elId) => {
          const div = window.document.getElementById(elId);
          if (div) {
            div.remove();
          }
        });
        selectedAnnoteEl = undefined;
      };
        // Handle positioning of the toggle
    window.addEventListener(
      "resize",
      throttle(() => {
        elRect = undefined;
        if (selectedAnnoteEl) {
          selectCodeLines(selectedAnnoteEl);
        }
      }, 10)
    );
    function throttle(fn, ms) {
    let throttle = false;
    let timer;
      return (...args) => {
        if(!throttle) { // first call gets through
            fn.apply(this, args);
            throttle = true;
        } else { // all the others get throttled
            if(timer) clearTimeout(timer); // cancel #2
            timer = setTimeout(() => {
              fn.apply(this, args);
              timer = throttle = false;
            }, ms);
        }
      };
    }
      // Attach click handler to the DT
      const annoteDls = window.document.querySelectorAll('dt[data-target-cell]');
      for (const annoteDlNode of annoteDls) {
        annoteDlNode.addEventListener('click', (event) => {
          const clickedEl = event.target;
          if (clickedEl !== selectedAnnoteEl) {
            unselectCodeLines();
            const activeEl = window.document.querySelector('dt[data-target-cell].code-annotation-active');
            if (activeEl) {
              activeEl.classList.remove('code-annotation-active');
            }
            selectCodeLines(clickedEl);
            clickedEl.classList.add('code-annotation-active');
          } else {
            // Unselect the line
            unselectCodeLines();
            clickedEl.classList.remove('code-annotation-active');
          }
        });
      }
  const findCites = (el) => {
    const parentEl = el.parentElement;
    if (parentEl) {
      const cites = parentEl.dataset.cites;
      if (cites) {
        return {
          el,
          cites: cites.split(' ')
        };
      } else {
        return findCites(el.parentElement)
      }
    } else {
      return undefined;
    }
  };
  var bibliorefs = window.document.querySelectorAll('a[role="doc-biblioref"]');
  for (var i=0; i<bibliorefs.length; i++) {
    const ref = bibliorefs[i];
    const citeInfo = findCites(ref);
    if (citeInfo) {
      tippyHover(citeInfo.el, function() {
        var popup = window.document.createElement('div');
        citeInfo.cites.forEach(function(cite) {
          var citeDiv = window.document.createElement('div');
          citeDiv.classList.add('hanging-indent');
          citeDiv.classList.add('csl-entry');
          var biblioDiv = window.document.getElementById('ref-' + cite);
          if (biblioDiv) {
            citeDiv.innerHTML = biblioDiv.innerHTML;
          }
          popup.appendChild(citeDiv);
        });
        return popup.innerHTML;
      });
    }
  }
});
</script>
<nav class="page-navigation column-body">
  <div class="nav-page nav-page-previous">
      <a href="../../content/OrderBook/index.html" class="pagination-link" aria-label="Projet Python">
        <i class="bi bi-arrow-left-short"></i> <span class="nav-page-text">Projet Python</span>
      </a>          
  </div>
</div> <!-- /content -->
<footer class="footer">
  <div class="nav-footer">
    <div class="nav-footer-left">
<p>Projet Python, Alban Hoerdt.<br> Licence <i class="fa-brands fa-creative-commons" aria-label="creative-commons"></i><br> Code source disponible sur <a href="https://github.com/Alhoer/Projet-Python"><code>Github</code></a></p>
</div>   
    <div class="nav-footer-center">
      &nbsp;
    </div>
    <div class="nav-footer-right">
<p>Site construit avec <i class="fa-brands fa-python" aria-label="python"></i> et <a href="https://quarto.org/"><code>Quarto</code></a><br> Inspiration pour la mise en forme du site <a href="https://github.com/linogaliana/python-datascientist">ici</a><br> <a href="https://github.com/Alhoer/Projet-Python">Code source disponible sur <i class="fa-brands fa-github" aria-label="github"></i> <code>GitHub</code></a></p>
</div>
  </div>
</footer>




</body></html>

